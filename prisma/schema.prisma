datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

/// USER
enum UserRole {
  USER
  ADMIN

  @@map("user_roles")
}

model User {
  id String @id @default(uuid()) @db.Uuid

  name      String
  email     String    @unique
  phone     String?
  password  String
  avatarUrl String?   @map("avatar_url")
  role      UserRole? @default(USER)

  lists List[]
  tasks Task[]

  @@map("users")
}

/// LIST
model List {
  id String @id @default(uuid()) @db.Uuid

  userId String @map("user_id") @db.Uuid

  name  String
  color String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("lists")
}

/// TASK
model Task {
  id String @id @default(uuid()) @db.Uuid

  userId String @map("user_id") @db.Uuid
  listId String @map("list_id") @db.Uuid

  title       String
  description String?

  isCompleted Boolean  @default(false) @map("is_completed")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  list List @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@map("tasks")
}
